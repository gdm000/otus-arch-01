import io.swagger.codegen.v3.CodegenConfigLoader
import io.swagger.codegen.v3.DefaultGenerator
import io.swagger.codegen.v3.ClientOptInput
import io.swagger.codegen.v3.ClientOpts
import io.swagger.v3.parser.OpenAPIV3Parser

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath('io.swagger.codegen.v3:swagger-codegen-maven-plugin:3.0.24')
    }
}


plugins {
    id 'org.springframework.boot' version '2.4.2'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'java'
}

group 'my.otus'
version '1.0.0'


sourceCompatibility = 1.8

repositories {
    mavenCentral()
}

dependencies {
    testCompile group: 'junit', name: 'junit', version: '4.12'
}

dependencies {
    compile('org.flywaydb:flyway-core')
    compile group: 'org.postgresql', name: 'postgresql', version: '42.1.4'
    compile group: 'javax.validation', name: 'validation-api', version: '2.0.1.Final'
    compile('io.springfox:springfox-swagger2:2.7.0')
    implementation 'org.springframework.boot:spring-boot-starter-web'
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-jdbc', version: '2.4.2'

    compile 'org.springframework.boot:spring-boot-starter-web'
    compile 'org.springframework.boot:spring-boot-starter-tomcat'
    compile "io.springfox:springfox-oas:3.0.0"
    compile "io.springfox:springfox-swagger-ui:3.0.0"
    compile 'com.github.joschi.jackson:jackson-datatype-threetenbp:2.6.4'
    compile 'javax.validation:validation-api'
    compile 'org.springdoc:springdoc-openapi-ui:1.5.2'
    compile 'org.springframework.plugin:spring-plugin-core:2.0.0.RELEASE'
    testCompile 'org.springframework.boot:spring-boot-starter-test'
}
/*dependencies {
    compile('org.springframework.boot:spring-boot-starter-web:1.5.9.RELEASE')
    compile('io.springfox:springfox-swagger2:2.7.0')
}*/
test {
    useJUnitPlatform()
}

ext.apiPackage   = 'my.otus.web.api'
ext.modelPackage = 'my.otus.web.model'
ext.swaggerFile  = "${rootDir}/api/oas.yaml"

task generateServer {
    doLast {
        def openAPI = new OpenAPIV3Parser().read(rootProject.swaggerFile.toString(), null, null)
        def clientOpts = new ClientOptInput().openAPI(openAPI)
        def codegenConfig = CodegenConfigLoader.forName('spring')
        codegenConfig.setOutputDir(project.buildDir.toString())
        clientOpts.setConfig(codegenConfig)
        def clientOps = new ClientOpts()
        clientOps.setProperties([
                'dateLibrary'     : 'java8', // Date library to use
                'useTags'         : 'true',  // Use tags for the naming
                'interfaceOnly'   : 'true',   // Generating the Controller API interface and the models only
                'apiPackage'       : project.apiPackage,
                'modelPackage'     : project.modelPackage
        ])
        clientOpts.setOpts(clientOps)

        def generator = new DefaultGenerator().opts(clientOpts)
        generator.generate() // Executing the generation
    }
}
//compileJava.dependsOn('generateServer')
/*sourceSets {
    main {
        java {
            srcDir "${project.buildDir}/src/main/java"
        }
    }
}*/
